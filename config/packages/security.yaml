security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    # show full user not found message
    hide_user_not_found: false
    #    always_authenticate_before_granting:  true -- DEPRECATED: no substitute found yet

    providers:
        users:
            entity:
                class: 'App\Entity\User'
                property: email

    # CONFIG FOR WORKING where EMU LDAP is available
#    firewalls:
#        dev:
#            pattern: ^/(_(profiler|wdt)|css|images|js)/
#            security: false
#        main:
#            lazy: true
#            provider: users
#
#            form_login_ldap:
#                login_path: app_login
#                check_path: app_login
#                service: Symfony\Component\Ldap\Ldap
#                # SYMFONY 7: bug #53529 [Ldap] Use {user_identifier} over deprecated {username} in factories (tcitworld)
#                dn_string: "cn={user_identifier},cn=users,dc=ad,dc=emich,dc=edu"
#            logout:
#                path: /logout


    # CONFIG FOR WORKING REMOTELY (where EMU LDAP is not available)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            user_checker: App\Security\UserChecker
        main:
            pattern: ^/
            user_checker: App\Security\UserChecker
            lazy: true
            form_login:
                provider: users
                login_path: app_login
                check_path: app_login
            logout:
                path: /logout

    password_hashers:
        # Use native password hasher, which auto-selects and migrates the best
        # possible hashing algorithm (which currently is "bcrypt")
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'


    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/map, roles: [ROLE_MAP_VIEW, ROLE_GLOBAL_ADMIN] }
        - { path: ^/multimediarequests, roles: [ROLE_MULTIMEDIA_VIEW, ROLE_GLOBAL_ADMIN] }
        - { path: ^/redirects, roles: [ROLE_REDIRECT_USER, ROLE_GLOBAL_ADMIN] }
        - { path: ^/register, role: ROLE_GLOBAL_ADMIN }
        - { path: ^/resetting, role: ROLE_GLOBAL_ADMIN }
        - { path: ^/admin, role: ROLE_GLOBAL_ADMIN }
        - { path: ^/applinks, role: ROLE_USER }
        - { path: ^/profile, role: ROLE_USER }
        - { path: ^/$, role: ROLE_USER }
#        # EXTERNAL API - Routes that must be publicly accessible!
        - { path: ^/api/external, role: PUBLIC_ACCESS }

    role_hierarchy:
        # Global
        ROLE_GLOBAL_ADMIN:       ROLE_USER
        ROLE_GLOBAL_ADMIN_SUPER: ROLE_GLOBAL_ADMIN
        # Map Application
        ROLE_MAP_VIEW:  ROLE_USER
        ROLE_MAP_CREATE: ROLE_MAP_VIEW
        ROLE_MAP_EDIT: ROLE_MAP_CREATE
        ROLE_MAP_DELETE: ROLE_MAP_EDIT
        ROLE_MAP_IMAGE_UPLOAD: [ROLE_MAP_VIEW, ROLE_MAP_EDIT]
        ROLE_MAP_ADMIN: [ROLE_MAP_DELETE, ROLE_MAP_IMAGE_UPLOAD]
        # Redirect Application
        ROLE_REDIRECT_USER: ROLE_USER
        ROLE_REDIRECT_ADMIN: ROLE_REDIRECT_USER
        # Multimedia Request Application
        ROLE_MULTIMEDIA_VIEW:  ROLE_USER
        ROLE_MULTIMEDIA_CREATE: ROLE_MULTIMEDIA_VIEW
        ROLE_MULTIMEDIA_EDIT: ROLE_MULTIMEDIA_CREATE
        ROLE_MULTIMEDIA_DELETE: ROLE_MULTIMEDIA_EDIT
        ROLE_MULTIMEDIA_EMAIL: ROLE_MULTIMEDIA_EDIT
        ROLE_MULTIMEDIA_ADMIN: [ROLE_MULTIMEDIA_DELETE, ROLE_MULTIMEDIA_EMAIL]
        # Catalog Programs
        ROLE_PROGRAMS_VIEW: ROLE_USER
        ROLE_PROGRAMS_CREATE: ROLE_PROGRAMS_VIEW
        ROLE_PROGRAMS_EDIT: ROLE_PROGRAMS_CREATE
        ROLE_PROGRAMS_DELETE: ROLE_PROGRAMS_EDIT
        ROLE_PROGRAMS_ADMIN: ROLE_PROGRAMS_DELETE
